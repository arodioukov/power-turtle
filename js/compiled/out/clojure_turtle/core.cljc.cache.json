["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Date",["^ ","~$prototype",["^ ","~$getTime",["^ "]]],"~$setTimeout",["^ "]],"~:use-macros",["^ ","~$all","~$clojure-turtle.macros","~$repeat","^:"],"~:excludes",["~#set",["^;"]],"~:name","~$clojure-turtle.core","~:imports",null,"~:requires",["^ ","~$q","~$quil.core","^B","^B","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$turtle",["^ ","^>","~$clojure-turtle.core/turtle","~:file","resources/public/js/compiled/out/clojure_turtle/core.cljc","~:line",79,"~:column",1,"~:end-line",80,"~:end-column",9,"~:doc","The default turtle entity used when no turtle is specified for an operation.","~:meta",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",80,"^J",3,"^K",80,"^L",9,"^M","The default turtle entity used when no turtle is specified for an operation."],"~:tag","~$any"],"~$draw",["^ ","~:protocol-inline",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",424,"^J",7,"^K",424,"^L",11,"~:arglists",["~#list",["~$quote",["^T",[[]]]]],"^M","The function passed to Quil for doing rendering."],"^>","~$clojure-turtle.core/draw","~:variadic",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"~:method-params",["^T",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^J",1,"^I",424,"^K",424,"~:max-fixed-arity",0,"~:fn-var",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","The function passed to Quil for doing rendering."],"~$reset-rendering",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",294,"^J",7,"^K",294,"^L",22,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"^>","~$clojure-turtle.core/reset-rendering","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",22,"^X",["^T",[[]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",294,"^K",294,"^[",0,"^10",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"~$end-fill",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",205,"^J",7,"^K",205,"^L",15,"^S",["^T",["^U",["^T",[[],["~$turt-state"]]]]],"^M","Stop filling the area of turtle moves. Must be called start-fill.","~:top-fn",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/end-fill","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",15,"^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]],"^X",["^T",[[],["^14"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",205,"^K",205,"^[",1,"^10",true,"^S",["^T",[[],["^14"]]],"^M","Stop filling the area of turtle moves. Must be called start-fill."],"~$clean",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",245,"^J",7,"^K",245,"^L",12,"^S",["^T",["^U",["^T",[[],["^14"]]]]],"^M","Clear the lines state, which effectively clears the drawing canvas.","^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/clean","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]],"^X",["^T",[[],["^14"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",245,"^K",245,"^[",1,"^10",true,"^S",["^T",[[],["^14"]]],"^M","Clear the lines state, which effectively clears the drawing canvas."],"~$left",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",138,"^J",7,"^K",138,"^L",11,"^S",["^T",["^U",["^T",[["~$ang"],["^14","^1:"]]]]],"^M","Same as right, but turns the turtle counter-clockwise.","^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1:"],["^14","^1:"]]],"^S",["^T",[["^1:"],["^14","^1:"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/left","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1:"],["^14","^1:"]]],"^S",["^T",[["^1:"],["^14","^1:"]]],"^Z",["^T",[null,null]]],"^X",["^T",[["^1:"],["^14","^1:"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",138,"^K",138,"^[",2,"^10",true,"^S",["^T",[["^1:"],["^14","^1:"]]],"^M","Same as right, but turns the turtle counter-clockwise."],"~$atan",["^ ","^>","~$clojure-turtle.core/atan","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",149,"^J",1,"^K",149,"^L",10,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",149,"^J",6,"^K",149,"^L",10]],"~$if-cljs",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",429,"^J",11,"^K",429,"^L",18,"~:macro",true,"^S",["^T",["^U",["^T",[["~$then","~$else"]]]]],"^M","Executes `then` clause iff generating ClojureScript code. Stolen from Prismatic code.\n  Ref. http://goo.gl/DhhhSN, http://goo.gl/Bhdyna."],"^>","~$clojure-turtle.core/if-cljs","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^X",["^T",[["~$&form","~$&env","^1@","^1A"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",429,"^1?",true,"^K",429,"^[",4,"^10",false,"^S",["^T",["^U",["^T",[["^1@","^1A"]]]]],"^M","Executes `then` clause iff generating ClojureScript code. Stolen from Prismatic code.\n  Ref. http://goo.gl/DhhhSN, http://goo.gl/Bhdyna."],"~$setxy",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",258,"^J",7,"^K",258,"^L",12,"^S",["^T",["^U",["^T",[["~$x","~$y"],["^14","~$x","~$y"]]]]],"^M","Set the position of turtle turt to x-coordinate x and y-coordinate y.","^15",["^ ","^W",false,"^[",3,"^X",["^T",[["~$x","~$y"],["^14","~$x","~$y"]]],"^S",["^T",[["~$x","~$y"],["^14","~$x","~$y"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/setxy","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^15",["^ ","^W",false,"^[",3,"^X",["^T",[["~$x","~$y"],["^14","~$x","~$y"]]],"^S",["^T",[["~$x","~$y"],["^14","~$x","~$y"]]],"^Z",["^T",[null,null]]],"^X",["^T",[["~$x","~$y"],["^14","~$x","~$y"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",258,"^K",258,"^[",3,"^10",true,"^S",["^T",[["~$x","~$y"],["^14","~$x","~$y"]]],"^M","Set the position of turtle turt to x-coordinate x and y-coordinate y."],"~$home",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",282,"^J",7,"^K",282,"^L",11,"^S",["^T",["^U",["^T",[[],["^14"]]]]],"^M","Set the turtle at coordinates (0,0), facing up (heading = 90 degrees)","^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/home","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]],"^X",["^T",[[],["^14"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",282,"^K",282,"^[",1,"^10",true,"^S",["^T",[[],["^14"]]],"^M","Set the turtle at coordinates (0,0), facing up (heading = 90 degrees)"],"~$get-turtle-sprite",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",310,"^J",7,"^K",310,"^L",24,"^S",["^T",["^U",["^T",[[],["~$turt"]]]]],"^M","A helper function that draws the triangle that represents the turtle onto the screen.","^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^1J"]]],"^S",["^T",[[],["^1J"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/get-turtle-sprite","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",24,"^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^1J"]]],"^S",["^T",[[],["^1J"]]],"^Z",["^T",[null,null]]],"^X",["^T",[[],["^1J"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",310,"^K",310,"^[",1,"^10",true,"^S",["^T",[[],["^1J"]]],"^M","A helper function that draws the triangle that represents the turtle onto the screen."],"~$alter-turtle",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",82,"^J",7,"^K",82,"^L",19,"^S",["^T",["^U",["^T",[["^14","~$f"]]]]],"^M","A helper function used in the implementation of basic operations to abstract\n  out the interface of applying a function to a turtle entity."],"^>","~$clojure-turtle.core/alter-turtle","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",19,"^X",["^T",[["^14","~$f"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",82,"^K",82,"^[",2,"^10",true,"^S",["^T",["^U",["^T",[["^14","~$f"]]]]],"^M","A helper function used in the implementation of basic operations to abstract\n  out the interface of applying a function to a turtle entity."],"~$color",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",106,"^J",7,"^K",106,"^L",12,"^S",["^T",["^U",["^T",[["~$c"],["^14","~$c"]]]]],"^M","Set the turtle's color using [red green blue].\n  RGB values are in the range 0 to 255, inclusive.","^15",["^ ","^W",false,"^[",2,"^X",["^T",[["~$c"],["^14","~$c"]]],"^S",["^T",[["~$c"],["^14","~$c"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/color","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^15",["^ ","^W",false,"^[",2,"^X",["^T",[["~$c"],["^14","~$c"]]],"^S",["^T",[["~$c"],["^14","~$c"]]],"^Z",["^T",[null,null]]],"^X",["^T",[["~$c"],["^14","~$c"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",106,"^K",106,"^[",2,"^10",true,"^S",["^T",[["~$c"],["^14","~$c"]]],"^M","Set the turtle's color using [red green blue].\n  RGB values are in the range 0 to 255, inclusive."],"~$start-fill",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",194,"^J",7,"^K",194,"^L",17,"^S",["^T",["^U",["^T",[[],["^14"]]]]],"^M","Make the turtle fill the area created by his subsequent moves, until end-fill is called.","^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/start-fill","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",17,"^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]],"^X",["^T",[[],["^14"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",194,"^K",194,"^[",1,"^10",true,"^S",["^T",[[],["^14"]]],"^M","Make the turtle fill the area created by his subsequent moves, until end-fill is called."],"~$pendown",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",184,"^J",7,"^K",184,"^L",14,"^S",["^T",["^U",["^T",[[],["^14"]]]]],"^M","Instruct the turtle to put its pen down. Subsequent movements will draw to screen.","^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/pendown","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",14,"^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]],"^X",["^T",[[],["^14"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",184,"^K",184,"^[",1,"^10",true,"^S",["^T",[[],["^14"]]],"^M","Instruct the turtle to put its pen down. Subsequent movements will draw to screen."],"~$DEFAULT-COLOR",["^ ","^>","~$clojure-turtle.core/DEFAULT-COLOR","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",31,"^J",1,"^K",32,"^L",16,"^M","The default color to be used (ex: if color is not specified)","^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",32,"^J",3,"^K",32,"^L",16,"^M","The default color to be used (ex: if color is not specified)"],"^O","~$cljs.core/IVector"],"~$forward",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",151,"^J",7,"^K",151,"^L",14,"^S",["^T",["^U",["^T",[["~$len"],["^14","^1X"]]]]],"^M","Move the turtle turt forward in the direction that it is facing by length len.","^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1X"],["^14","^1X"]]],"^S",["^T",[["^1X"],["^14","^1X"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/forward","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",14,"^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1X"],["^14","^1X"]]],"^S",["^T",[["^1X"],["^14","^1X"]]],"^Z",["^T",[null,null]]],"^X",["^T",[["^1X"],["^14","^1X"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",151,"^K",151,"^[",2,"^10",true,"^S",["^T",[["^1X"],["^14","^1X"]]],"^M","Move the turtle turt forward in the direction that it is facing by length len."],"~$Turtle",["^ ","~:num-fields",8,"~:protocols",["^=",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$clojure-turtle.core/Object","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^>","~$clojure-turtle.core/Turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"~:type",true,"^J",12,"~:internal-ctor",true,"^I",38,"~:record",true,"^K",38,"~:skip-protocol-flag",["^=",["^21","^22","^23","^24","^25","^26","^27","^28","^29","^2:","^2<","^2=","^2>","^2?"]]],"~$radians->deg",["^ ","^>","~$clojure-turtle.core/radians->deg","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",147,"^J",1,"^K",147,"^L",18,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",147,"^J",6,"^K",147,"^L",18]],"~$map->Turtle",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",38,"^J",12,"^K",38,"^L",18,"^2B",true,"~:factory","~:map","^S",["^T",["^U",["^T",[["~$G__33350"]]]]]],"^>","~$clojure-turtle.core/map->Turtle","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^X",["^T",[["^2J"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^2B",true,"^2H","^2I","^I",38,"^K",38,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["^2J"]]]]]],"~$new-window",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",436,"^J",11,"^K",436,"^L",21,"^1?",true,"^S",["^T",["^U",["^T",[["~$&",["~$config"]]]]]],"^M","Opens up a new window that shows the turtle rendering canvas.  In CLJS it will render\n  to a new HTML5 canvas object. An optional config map can be provided, where the key\n  :title indicates the window title (clj), the :size key indicates a vector of 2 values\n  indicating the width and height of the window.","^15",["^ ","^W",true,"^[",2,"^X",[["^T",["^1C","^1D",["^2M"]]]],"^S",["^T",[["^1C","^1D","~$&",["^2M"]]]],"^Z",["^T",[null]]]],"^>","~$clojure-turtle.core/new-window","^W",true,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",21,"^15",["^ ","^W",true,"^[",2,"^X",[["^T",["^1C","^1D",["^2M"]]]],"^S",["^T",[["^1C","^1D","~$&",["^2M"]]]],"^Z",["^T",[null]]],"^X",[["^T",["^1C","^1D",["^2M"]]]],"^Y",null,"^Z",["^T",[null]],"^J",1,"^I",436,"^1?",true,"^K",436,"^[",2,"^10",false,"^S",["^T",[["^1C","^1D","~$&",["^2M"]]]],"^M","Opens up a new window that shows the turtle rendering canvas.  In CLJS it will render\n  to a new HTML5 canvas object. An optional config map can be provided, where the key\n  :title indicates the window title (clj), the :size key indicates a vector of 2 values\n  indicating the width and height of the window."],"~$make-opaque",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",93,"^J",7,"^K",93,"^L",18,"^S",["^T",["^U",["^T",[["~$color-vec"]]]]],"^M","Take a color vector, as passed to the `color` fn, and return a color vector\n  in the form [red blue green alpha], where all RGB and alpha values are integers\n  in the range 0-255 inclusive. In order to make the color vector represent full\n  opacity, the alpha value will be 255."],"^>","~$clojure-turtle.core/make-opaque","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^X",["^T",[["^2P"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",93,"^K",93,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["^2P"]]]]],"^M","Take a color vector, as passed to the `color` fn, and return a color vector\n  in the form [red blue green alpha], where all RGB and alpha values are integers\n  in the range 0-255 inclusive. In order to make the color vector represent full\n  opacity, the alpha value will be 255."],"~$penup",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",174,"^J",7,"^K",174,"^L",12,"^S",["^T",["^U",["^T",[[],["^14"]]]]],"^M","Instruct the turtle to pick its pen up. Subsequent movements will not draw to screen until the pen is put down again.","^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/penup","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^15",["^ ","^W",false,"^[",1,"^X",["^T",[[],["^14"]]],"^S",["^T",[[],["^14"]]],"^Z",["^T",[null,null]]],"^X",["^T",[[],["^14"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",174,"^K",174,"^[",1,"^10",true,"^S",["^T",[[],["^14"]]],"^M","Instruct the turtle to pick its pen up. Subsequent movements will not draw to screen until the pen is put down again."],"~$setheading",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",271,"^J",7,"^K",271,"^L",17,"^S",["^T",["^U",["^T",[["^1:"],["^14","^1:"]]]]],"^M","Set the direction which the turtle is facing, given in degrees, where 0 is to the right,\n  90 is up, 180 is left, and 270 is down.","^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1:"],["^14","^1:"]]],"^S",["^T",[["^1:"],["^14","^1:"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/setheading","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",17,"^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1:"],["^14","^1:"]]],"^S",["^T",[["^1:"],["^14","^1:"]]],"^Z",["^T",[null,null]]],"^X",["^T",[["^1:"],["^14","^1:"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",271,"^K",271,"^[",2,"^10",true,"^S",["^T",[["^1:"],["^14","^1:"]]],"^M","Set the direction which the turtle is facing, given in degrees, where 0 is to the right,\n  90 is up, 180 is left, and 270 is down."],"~$setup",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",301,"^J",7,"^K",301,"^L",12,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"^>","~$clojure-turtle.core/setup","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^X",["^T",[[]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",301,"^K",301,"^[",0,"^10",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"~$->Turtle",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",38,"^J",12,"^K",38,"^L",18,"^2B",true,"^2H","~:positional","^S",["^T",["^U",["^T",[["~$x","~$y","~$angle","~$pen","^1N","~$fill","~$commands","~$start-from"]]]]]],"^>","~$clojure-turtle.core/->Turtle","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^X",["^T",[["~$x","~$y","^2Z","^2[","^1N","^30","^31","^32"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^2B",true,"^2H","^2Y","^I",38,"^K",38,"^[",8,"^10",true,"^S",["^T",["^U",["^T",[["~$x","~$y","^2Z","^2[","^1N","^30","^31","^32"]]]]]],"~$new-turtle",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",66,"^J",7,"^K",66,"^L",17,"^S",["^T",["^U",["^T",[[]]]]],"^M","Returns an entity that represents a turtle."],"^>","~$clojure-turtle.core/new-turtle","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",17,"^X",["^T",[[]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",66,"^K",66,"^[",0,"^10",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","Returns an entity that represents a turtle."],"~$draw-turtle",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",398,"^J",7,"^K",398,"^L",18,"^S",["^T",["^U",["^T",[["^14"]]]]],"^M","The function passed to Quil for doing rendering."],"^>","~$clojure-turtle.core/draw-turtle","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^X",["^T",[["^14"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",398,"^K",398,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["^14"]]]]],"^M","The function passed to Quil for doing rendering."],"~$back",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",167,"^J",7,"^K",167,"^L",11,"^S",["^T",["^U",["^T",[["^1X"],["^14","^1X"]]]]],"^M","Same as forward, but move the turtle backwards, which is opposite of the direction it is facing.","^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1X"],["^14","^1X"]]],"^S",["^T",[["^1X"],["^14","^1X"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/back","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1X"],["^14","^1X"]]],"^S",["^T",[["^1X"],["^14","^1X"]]],"^Z",["^T",[null,null]]],"^X",["^T",[["^1X"],["^14","^1X"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",167,"^K",167,"^[",2,"^10",true,"^S",["^T",[["^1X"],["^14","^1X"]]],"^M","Same as forward, but move the turtle backwards, which is opposite of the direction it is facing."],"~$pr-str-turtle",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",50,"^J",7,"^K",50,"^L",20,"^S",["^T",["^U",["^T",[["^1J"]]]]],"^M","This method determines what gets returned when passing a Turtle record instance to pr-str, which in turn affects what gets printed at the REPL"],"^>","~$clojure-turtle.core/pr-str-turtle","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",20,"^X",["^T",[["^1J"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",50,"^K",50,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["^1J"]]]]],"^M","This method determines what gets returned when passing a Turtle record instance to pr-str, which in turn affects what gets printed at the REPL"],"~$wait",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",236,"^J",7,"^K",236,"^L",11,"^S",["^T",["^U",["^T",[["~$ms"]]]]],"^M","Sleeps for ms miliseconds. Can be used in a repeat to show commands execute in real time"],"^>","~$clojure-turtle.core/wait","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^X",["^T",[["^3="]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",236,"^K",236,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["^3="]]]]],"^M","Sleeps for ms miliseconds. Can be used in a repeat to show commands execute in real time"],"~$right",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",121,"^J",7,"^K",121,"^L",12,"^S",["^T",["^U",["^T",[["^1:"],["^14","^1:"]]]]],"^M","Rotate the turtle turt clockwise by ang degrees.","^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1:"],["^14","^1:"]]],"^S",["^T",[["^1:"],["^14","^1:"]]],"^Z",["^T",[null,null]]]],"^>","~$clojure-turtle.core/right","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^15",["^ ","^W",false,"^[",2,"^X",["^T",[["^1:"],["^14","^1:"]]],"^S",["^T",[["^1:"],["^14","^1:"]]],"^Z",["^T",[null,null]]],"^X",["^T",[["^1:"],["^14","^1:"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",121,"^K",121,"^[",2,"^10",true,"^S",["^T",[["^1:"],["^14","^1:"]]],"^M","Rotate the turtle turt clockwise by ang degrees."],"~$draw-turtle-commands",["^ ","^R",null,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",353,"^J",7,"^K",353,"^L",27,"^S",["^T",["^U",["^T",[["^1J"]]]]],"^M","Takes a seq of turtle commands and converts them into Quil commands to draw\n  onto the canvas"],"^>","~$clojure-turtle.core/draw-turtle-commands","^W",false,"^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",27,"^X",["^T",[["^1J"]]],"^Y",null,"^Z",["^T",[null,null]],"^J",1,"^I",353,"^K",353,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["^1J"]]]]],"^M","Takes a seq of turtle commands and converts them into Quil commands to draw\n  onto the canvas"],"~$deg->radians",["^ ","^>","~$clojure-turtle.core/deg->radians","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",145,"^J",1,"^K",145,"^L",18,"^N",["^ ","^H","/home/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",145,"^J",6,"^K",145,"^L",18]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$q","^B","^B","^B","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^=",["~:y","~$x","^1B","~$quil.sketch/add-canvas","~:setxy","~:color","~$quil.core/defsketch","~:start-fill","~$y","~:ns","~:start-from","^V","~:fill","^1N","~$do","~:angle","~:size","~:title","^2W","~:setheading","~:setup","^30","^32","~:host","~:commands","^2Z","~:pen","~:translate","~:x","^31","~:draw","^2[","~:end-fill","~$example"]],"~:order",["~:x","~:y","^3R","^3Y","^3K","^3P","^3X","^3O","~$x","~$y","^2Z","^2[","^1N","^30","^31","^32","^3U","^3Z","^3M","^40","^3J","^3N","^1B","^3S","^3W","^3Q","^3I","^3L","^41","^3V","^2W","^3[","^V","^3T"]],"^M",null]