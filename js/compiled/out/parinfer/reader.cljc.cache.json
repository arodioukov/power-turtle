["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$parinfer.reader","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$whitespace?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","~:line",12,"~:column",7,"~:end-line",12,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^E",[["~$ch"]]]]]],"^5","~$parinfer.reader/whitespace?","~:variadic",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",18,"~:method-params",["^E",[["^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"^@",12,"^B",12,"~:max-fixed-arity",1,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G"]]]]]],"~$in-code?",["^ ","^=",null,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",40,"^A",7,"^B",40,"^C",15,"^D",["^E",["^F",["^E",[["~$stack"]]]]],"~:doc","Next character is inside actual code."],"^5","~$parinfer.reader/in-code?","^I",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",15,"^J",["^E",[["^P"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^@",40,"^B",40,"^M",1,"^N",true,"^D",["^E",["^F",["^E",[["^P"]]]]],"^Q","Next character is inside actual code."],"~$valid-closer?",["^ ","^=",null,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",46,"^A",7,"^B",46,"^C",20,"^D",["^E",["^F",["^E",[["^P","^G"]]]]],"^Q","Determine if the given closing delimiter can be used next, assuming we are inside code."],"^5","~$parinfer.reader/valid-closer?","^I",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",20,"^J",["^E",[["^P","^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^@",46,"^B",46,"^M",2,"^N",true,"^D",["^E",["^F",["^E",[["^P","^G"]]]]],"^Q","Determine if the given closing delimiter can be used next, assuming we are inside code."],"~$prev-ch",["^ ","^=",null,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",21,"^A",7,"^B",21,"^C",14,"^D",["^E",["^F",["^E",[["^P"]]]]]],"^5","~$parinfer.reader/prev-ch","^I",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",14,"^J",["^E",[["^P"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^@",21,"^B",21,"^M",1,"^N",true,"^D",["^E",["^F",["^E",[["^P"]]]]]],"~$in-comment?",["^ ","^=",null,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",35,"^A",7,"^B",35,"^C",18,"^D",["^E",["^F",["^E",[["^P"]]]]],"^Q","Next character is inside a comment."],"^5","~$parinfer.reader/in-comment?","^I",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",18,"^J",["^E",[["^P"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^@",35,"^B",35,"^M",1,"^N",true,"^D",["^E",["^F",["^E",[["^P"]]]]],"^Q","Next character is inside a comment."],"~$opening-delim?",["^ ","^5","~$parinfer.reader/opening-delim?","^?","resources/public/js/compiled/out/parinfer/reader.cljc","^@",9,"^A",1,"^B",9,"^C",20,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",9,"^A",6,"^B",9,"^C",20],"~:tag","~$cljs.core/ISet"],"~$closing-delim?",["^ ","^5","~$parinfer.reader/closing-delim?","^?","resources/public/js/compiled/out/parinfer/reader.cljc","^@",10,"^A",1,"^B",10,"^C",20,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",10,"^A",6,"^B",10,"^C",20],"^[","^10"],"~$in-str?",["^ ","^=",null,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",29,"^A",7,"^B",29,"^C",14,"^D",["^E",["^F",["^E",[["^P"]]]]],"^Q","Next character is inside a string."],"^5","~$parinfer.reader/in-str?","^I",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",14,"^J",["^E",[["^P"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^@",29,"^B",29,"^M",1,"^N",true,"^D",["^E",["^F",["^E",[["^P"]]]]],"^Q","Next character is inside a string."],"~$matching-delim",["^ ","^5","~$parinfer.reader/matching-delim","^?","resources/public/js/compiled/out/parinfer/reader.cljc","^@",4,"^A",1,"^B",4,"^C",20,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",4,"^A",6,"^B",4,"^C",20],"^[","~$cljs.core/IMap"],"~$push-char",["^ ","^=",null,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",126,"^A",7,"^B",126,"^C",16,"^D",["^E",["^F",["^E",[["~$state"]]]]]],"^5","~$parinfer.reader/push-char","^I",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",16,"^J",["^E",[["^19"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^@",126,"^B",126,"^M",1,"^N",true,"^D",["^E",["^F",["^E",[["^19"]]]]]],"~$escaping?",["^ ","^=",null,"^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",24,"^A",7,"^B",24,"^C",16,"^D",["^E",["^F",["^E",[["^P"]]]]],"^Q","Next character will be escaped."],"^5","~$parinfer.reader/escaping?","^I",false,"^?","resources/public/js/compiled/out/parinfer/reader.cljc","^C",16,"^J",["^E",[["^P"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^@",24,"^B",24,"^M",1,"^N",true,"^D",["^E",["^F",["^E",[["^P"]]]]],"^Q","Next character will be escaped."],"~$push-char*",["^ ","^5","~$parinfer.reader/push-char*","^?","resources/public/js/compiled/out/parinfer/reader.cljc","^@",59,"^A",1,"^B",59,"^C",21,"^Q","Update the delimiter stack with the given character.","^>",["^ ","^?","/home/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/reader.cljc","^@",59,"^A",11,"^B",59,"^C",21,"^Q","Update the delimiter stack with the given character."],"^[","~$cljs.core/MultiFn"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:open","~:backup","~:else","~:default","~:x-pos","~:close","~:ch","~:stack","~:indent-delta","~:hierarchy"]],"~:order",["^1J","^1M","^1D","^1I","^1F","^1G","^1K","^1H","^1L","^1E"]],"^Q","a basic lisp reader for tracking parens and token states"]