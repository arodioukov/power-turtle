["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$cljs",["^ ","~$user",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$replumb.common","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$error-branch?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^K",[["~$error"]]]]]],"^9","~$replumb.common/error-branch?","~:variadic",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",20,"~:method-params",["^K",[["^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"^F",5,"^H",5,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M"]]]]]],"~$error-seq",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",13,"^G",7,"^H",13,"^I",16,"^J",["^K",["^L",["^K",[["^M"]]]]]],"^9","~$replumb.common/error-seq","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",16,"^P",["^K",[["^M"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",13,"^H",13,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^M"]]]]]],"~$echo-callback",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",43,"^G",7,"^H",43,"^I",20,"^J",["^K",["^L",["^K",[["~$result-map"]]]]],"~:doc","Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing.","~:post",[["^K",["~$map?","~$%"]],["^K",["~$find","~$%","~:success?"]],["^K",["~$or",["^K",["^10","~$%","~:error"]],["^K",["^10","~$%","~:value"]]]]]],"^9","~$replumb.common/echo-callback","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",20,"^P",["^K",[["^X"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",43,"^H",43,"^Z",[["^K",["^[","~$%"]],["^K",["^10","~$%","^11"]],["^K",["^12",["^K",["^10","~$%","^13"]],["^K",["^10","~$%","^14"]]]]],"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^X"]]]]],"^Y","Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing."],"~$filter-fn-keys",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",102,"^G",7,"^H",102,"^I",21,"^J",["^K",["^L",["^K",[["~$opts"]]]]],"^Y","Filter out the option map keys that have -fn in it."],"^9","~$replumb.common/filter-fn-keys","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^P",["^K",[["^17"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",102,"^H",102,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^17"]]]]],"^Y","Filter out the option map keys that have -fn in it."],"~$has-valid-warning?",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",85,"^G",7,"^H",85,"^I",25,"^J",["^K",["^L",["^K",[["~$result"]]]]]],"^9","~$replumb.common/has-valid-warning?","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",25,"^P",["^K",[["^1:"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",85,"^H",85,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^1:"]]]]]],"~$normalize-path",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",120,"^G",7,"^H",120,"^I",21,"^J",["^K",["^L",["^K",[["~$path"]]]]],"^Y","Adds a / if missing at the end of the path."],"^9","~$replumb.common/normalize-path","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^P",["^K",[["^1="]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",120,"^H",120,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^1="]]]]],"^Y","Adds a / if missing at the end of the path."],"~$error-keyword-not-supported",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",89,"^G",7,"^H",89,"^I",34,"^J",["^K",["^L",["^K",[["~$keyword","~$ex-info-data"]]]]],"^Y","Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."],"^9","~$replumb.common/error-keyword-not-supported","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",34,"^P",["^K",[["^1@","^1A"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",89,"^H",89,"^S",2,"^T",true,"^J",["^K",["^L",["^K",[["^1@","^1A"]]]]],"^Y","Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."],"~$wrap-error",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",56,"^G",7,"^H",56,"^I",17,"^J",["^K",["^L",["^K",[["~$message"]]]]],"^Y","Wraps the message in a error map."],"^9","~$replumb.common/wrap-error","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",17,"^P",["^K",[["^1D"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",56,"^H",56,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^1D"]]]]],"^Y","Wraps the message in a error map."],"~$extract-message",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",17,"^G",7,"^H",17,"^I",22,"^J",["^K",["^L",["^K",[["~$err"],["~$print-stack?","^1G"],["^1H","~$exclude-error-msg?","^1G"]]]]],"^Y","Iteratively extracts messages inside nested #error objects, returns a\n  string.\n\n  If the boolean `exclude-error-msg?` is true, only the messages not\n  marked as \"ERROR\" will be included in the final string.\n\n  If the boolean `print-stack?` is true, the stack will be added\n  to the final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **","~:top-fn",["^ ","^O",false,"^S",3,"^P",["^K",[["^1G"],["^1H","^1G"],["^1H","^1I","^1G"]]],"^J",["^K",[["^1G"],["^1H","^1G"],["^1H","^1I","^1G"]]],"^R",["^K",[null,null,null]]]],"^9","~$replumb.common/extract-message","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",22,"^1J",["^ ","^O",false,"^S",3,"^P",["^K",[["^1G"],["^1H","^1G"],["^1H","^1I","^1G"]]],"^J",["^K",[["^1G"],["^1H","^1G"],["^1H","^1I","^1G"]]],"^R",["^K",[null,null,null]]],"^P",["^K",[["^1G"],["^1H","^1G"],["^1H","^1I","^1G"]]],"^Q",null,"^R",["^K",[null,null,null]],"^G",1,"^F",17,"^H",17,"^S",3,"^T",true,"^J",["^K",[["^1G"],["^1H","^1G"],["^1H","^1I","^1G"]]],"^Y","Iteratively extracts messages inside nested #error objects, returns a\n  string.\n\n  If the boolean `exclude-error-msg?` is true, only the messages not\n  marked as \"ERROR\" will be included in the final string.\n\n  If the boolean `print-stack?` is true, the stack will be added\n  to the final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **"],"~$wrap-success",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",51,"^G",7,"^H",51,"^I",19,"^J",["^K",["^L",["^K",[["^1D"]]]]],"^Y","Wraps the message in a success map."],"^9","~$replumb.common/wrap-success","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",19,"^P",["^K",[["^1D"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",51,"^H",51,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^1D"]]]]],"^Y","Wraps the message in a success map."],"~$valid-eval-warning?",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",80,"^G",7,"^H",80,"^I",26,"^J",["^K",["^L",["^K",[["~$warning"]]]]],"^Y","Is the string returned from an evaluation valid?"],"^9","~$replumb.common/valid-eval-warning?","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",26,"^P",["^K",[["^1O"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",80,"^H",80,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^1O"]]]]],"^Y","Is the string returned from an evaluation valid?"],"~$error-children",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",9,"^G",7,"^H",9,"^I",21,"^J",["^K",["^L",["^K",[["^M"]]]]]],"^9","~$replumb.common/error-children","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^P",["^K",[["^M"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",9,"^H",9,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^M"]]]]]],"~$valid-eval-result?",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",67,"^G",7,"^H",67,"^I",25,"^J",["^K",["^L",["^K",[["^1:"],["^17","^1:"]]]]],"^Y","Is the string returned from an evaluation valid?","^1J",["^ ","^O",false,"^S",2,"^P",["^K",[["^1:"],["^17","^1:"]]],"^J",["^K",[["^1:"],["^17","^1:"]]],"^R",["^K",[null,null]]]],"^9","~$replumb.common/valid-eval-result?","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",25,"^1J",["^ ","^O",false,"^S",2,"^P",["^K",[["^1:"],["^17","^1:"]]],"^J",["^K",[["^1:"],["^17","^1:"]]],"^R",["^K",[null,null]]],"^P",["^K",[["^1:"],["^17","^1:"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",67,"^H",67,"^S",2,"^T",true,"^J",["^K",[["^1:"],["^17","^1:"]]],"^Y","Is the string returned from an evaluation valid?"],"~$set-cljs-user!",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",125,"^G",7,"^H",125,"^I",21,"^J",["^K",["^L",["^K",[[]]]]],"^Y","Set up the cljs.user namespace"],"^9","~$replumb.common/set-cljs-user!","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^P",["^K",[[]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",125,"^H",125,"^S",0,"^T",true,"^J",["^K",["^L",["^K",[[]]]]],"^Y","Set up the cljs.user namespace"],"~$inline-newline?",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",61,"^G",7,"^H",61,"^I",22,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^Y","Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."],"^9","~$replumb.common/inline-newline?","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",22,"^P",["^K",[["~$s"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",61,"^H",61,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^Y","Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."],"~$debug-prn",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",109,"^G",7,"^H",109,"^I",16,"^J",["^K",["^L",["^K",[["~$&","~$args"]]]]],"^Y","The function used by replumb for logging. It simply calls println for\n  now so you that client code can set *print-fn* to customize the\n  behavior, for example the following marks traces as DEBUG:\n\n  (set! *print-fn*\n    (fn [& args]\n      (.apply (.-debug js/console) js/console (into-array args))))","^1J",["^ ","^O",true,"^S",0,"^P",[["^K",["^1Z"]]],"^J",["^K",[["~$&","^1Z"]]],"^R",["^K",[null]]]],"^9","~$replumb.common/debug-prn","^O",true,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",16,"^1J",["^ ","^O",true,"^S",0,"^P",[["^K",["^1Z"]]],"^J",["^K",[["~$&","^1Z"]]],"^R",["^K",[null]]],"^P",[["^K",["^1Z"]]],"^Q",null,"^R",["^K",[null]],"^G",1,"^F",109,"^H",109,"^S",0,"^T",true,"^J",["^K",[["~$&","^1Z"]]],"^Y","The function used by replumb for logging. It simply calls println for\n  now so you that client code can set *print-fn* to customize the\n  behavior, for example the following marks traces as DEBUG:\n\n  (set! *print-fn*\n    (fn [& args]\n      (.apply (.-debug js/console) js/console (into-array args))))"],"~$valid-eval-error?",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",75,"^G",7,"^H",75,"^I",24,"^J",["^K",["^L",["^K",[["^M"]]]]],"^Y","Is the string returned from an evaluation valid?"],"^9","~$replumb.common/valid-eval-error?","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",24,"^P",["^K",[["^M"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",75,"^H",75,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^Y","Is the string returned from an evaluation valid?"],"~$error-argument-must-be-symbol",["^ ","^C",null,"^D",["^ ","^E","/home/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",96,"^G",7,"^H",96,"^I",36,"^J",["^K",["^L",["^K",[["~$symbol","^1A"]]]]],"^Y","Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."],"^9","~$replumb.common/error-argument-must-be-symbol","^O",false,"^E","resources/public/js/compiled/out/replumb/common.cljs","^I",36,"^P",["^K",[["^23","^1A"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",96,"^H",96,"^S",2,"^T",true,"^J",["^K",["^L",["^K",[["^23","^1A"]]]]],"^Y","Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["^14","~:warning","~:no-pr-str-on-value","^13"]],"~:order",["^14","^13","^2:","^29"]],"^Y",null]