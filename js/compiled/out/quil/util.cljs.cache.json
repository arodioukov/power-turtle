["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.util","~:imports",null,"~:requires",["^ ","~$cstr","~$clojure.string","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$no-fn",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/timothy/git/power-turtle/resources/public/js/compiled/out/quil/util.cljs","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^I",[[]]]]],"~:doc","Function that does nothing."],"^7","~$quil.util/no-fn","~:variadic",false,"^C","resources/public/js/compiled/out/quil/util.cljs","^G",12,"~:method-params",["^I",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^E",1,"^D",5,"^F",5,"~:max-fixed-arity",0,"~:fn-var",true,"^H",["^I",["^J",["^I",[[]]]]],"^K","Function that does nothing."],"~$resolve-constant-key",["^ ","^A",null,"^B",["^ ","^C","/home/timothy/git/power-turtle/resources/public/js/compiled/out/quil/util.cljs","^D",27,"^E",7,"^F",27,"^G",27,"^H",["^I",["^J",["^I",[["~$key","~$mappings"]]]]],"^K","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"^7","~$quil.util/resolve-constant-key","^M",false,"^C","resources/public/js/compiled/out/quil/util.cljs","^G",27,"^N",["^I",[["^T","^U"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",27,"^F",27,"^Q",2,"^R",true,"^H",["^I",["^J",["^I",[["^T","^U"]]]]],"^K","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"~$length-of-longest-key",["^ ","^A",null,"^B",["^ ","^C","/home/timothy/git/power-turtle/resources/public/js/compiled/out/quil/util.cljs","^D",39,"^E",7,"^F",39,"^G",28,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^K","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"^7","~$quil.util/length-of-longest-key","^M",false,"^C","resources/public/js/compiled/out/quil/util.cljs","^G",28,"^N",["^I",[["~$m"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",39,"^F",39,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^K","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"~$gen-padding",["^ ","^A",null,"^B",["^ ","^C","/home/timothy/git/power-turtle/resources/public/js/compiled/out/quil/util.cljs","^D",48,"^E",7,"^F",48,"^G",18,"^H",["^I",["^J",["^I",[["~$len"],["^Z","~$pad"],["~$s","^Z","^["]]]]],"^K","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space","~:top-fn",["^ ","^M",false,"^Q",3,"^N",["^I",[["^Z"],["^Z","^["],["~$s","^Z","^["]]],"^H",["^I",[["^Z"],["^Z","^["],["~$s","^Z","^["]]],"^P",["^I",[null,null,null]]]],"^7","~$quil.util/gen-padding","^M",false,"^C","resources/public/js/compiled/out/quil/util.cljs","^G",18,"^10",["^ ","^M",false,"^Q",3,"^N",["^I",[["^Z"],["^Z","^["],["~$s","^Z","^["]]],"^H",["^I",[["^Z"],["^Z","^["],["~$s","^Z","^["]]],"^P",["^I",[null,null,null]]],"^N",["^I",[["^Z"],["^Z","^["],["~$s","^Z","^["]]],"^O",null,"^P",["^I",[null,null,null]],"^E",1,"^D",48,"^F",48,"^Q",3,"^R",true,"^H",["^I",[["^Z"],["^Z","^["],["~$s","^Z","^["]]],"^K","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"~$print-definition-list",["^ ","^A",null,"^B",["^ ","^C","/home/timothy/git/power-turtle/resources/public/js/compiled/out/quil/util.cljs","^D",60,"^E",7,"^F",60,"^G",28,"^H",["^I",["^J",["^I",[["~$definitions"]]]]]],"^7","~$quil.util/print-definition-list","^M",false,"^C","resources/public/js/compiled/out/quil/util.cljs","^G",28,"^N",["^I",[["^13"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",60,"^F",60,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["^13"]]]]]],"~$prepare-quil-name",["^ ","^A",null,"^B",["^ ","^C","/home/timothy/git/power-turtle/resources/public/js/compiled/out/quil/util.cljs","^D",80,"^E",7,"^F",80,"^G",24,"^H",["^I",["^J",["^I",[["~$const-keyword"]]]]]],"^7","~$quil.util/prepare-quil-name","^M",false,"^C","resources/public/js/compiled/out/quil/util.cljs","^G",24,"^N",["^I",[["^16"]]],"^O",null,"^P",["^I",[null,null]],"^E",1,"^D",80,"^F",80,"^Q",1,"^R",true,"^H",["^I",["^J",["^I",[["^16"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:else"]],"~:order",["^1<"]],"^K","Utility fns"]