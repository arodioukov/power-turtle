["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.middleware","~:imports",null,"~:requires",["^ ","~$reagent.ratom","^9","~$re-frame.undo","^:","~$re-frame.utils","^;","~$data","~$clojure.data","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$groupEnd","^;","~$log","^;","~$IReactiveAtom","^9","~$group","^;","~$warn","^;","~$store-now!","^:","~$error","^;"],"~:defs",["^ ","~$pure",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","~:line",12,"~:column",7,"~:end-line",12,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^Q",[["~$handler"]]]]],"~:doc","Acts as an adaptor, allowing handlers to be writen as pure functions.\n  The re-frame router passes the `app-db` atom as the first parameter to any handler.\n  This middleware adapts that atom to be the value within the atom.\n  If you strip away the error/efficiency checks, this middleware is doing:\n     (reset! app-db (handler @app-db event-vec))\n  You don't have to use this middleware directly. It is automatically applied to\n  your handler's middleware when you use \"register-handler\".\n  In fact, the only way to by-pass automatic use of \"pure\" in your middleware\n  is to use the low level registration function \"re-frame.handlers/register-base\""],"^5","~$re-frame.middleware/pure","~:variadic",false,"^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^O",11,"~:method-params",["^Q",[["^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^M",1,"^L",12,"^N",12,"~:max-fixed-arity",1,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Acts as an adaptor, allowing handlers to be writen as pure functions.\n  The re-frame router passes the `app-db` atom as the first parameter to any handler.\n  This middleware adapts that atom to be the value within the atom.\n  If you strip away the error/efficiency checks, this middleware is doing:\n     (reset! app-db (handler @app-db event-vec))\n  You don't have to use this middleware directly. It is automatically applied to\n  your handler's middleware when you use \"register-handler\".\n  In fact, the only way to by-pass automatic use of \"pure\" in your middleware\n  is to use the low level registration function \"re-frame.handlers/register-base\""],"~$debug",["^ ","^I",null,"^J",["^ ","^K","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","^L",62,"^M",7,"^N",62,"^O",12,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Middleware which logs debug information to js/console for each event.\n  Includes a clojure.data/diff of the db, before vs after, showing the changes\n  caused by the event."],"^5","~$re-frame.middleware/debug","^V",false,"^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^O",12,"^W",["^Q",[["^S"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^L",62,"^N",62,"^Z",1,"^[",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Middleware which logs debug information to js/console for each event.\n  Includes a clojure.data/diff of the db, before vs after, showing the changes\n  caused by the event."],"~$trim-v",["^ ","^I",null,"^J",["^ ","^K","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","^L",80,"^M",7,"^N",80,"^O",13,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Middleware which removes the first element of v, allowing you to write\n  more aesthetically pleasing handlers. No leading underscore on the event-v!\n  Your handlers will look like this:\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)\n  "],"^5","~$re-frame.middleware/trim-v","^V",false,"^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^O",13,"^W",["^Q",[["^S"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^L",80,"^N",80,"^Z",1,"^[",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Middleware which removes the first element of v, allowing you to write\n  more aesthetically pleasing handlers. No leading underscore on the event-v!\n  Your handlers will look like this:\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)\n  "],"~$path",["^ ","^5","~$re-frame.middleware/path","^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^L",106,"^M",1,"^N",106,"^O",10,"^J",["^ ","^K","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","^L",106,"^M",6,"^N",106,"^O",10],"^T","A middleware factory which supplies a sub-tree of `db` to the handler.\n   Works a bit like update-in. Supplies a narrowed data structure for the handler.\n   Afterwards, grafts the result of the handler back into db.\n   Usage:\n     (path :some :path)\n     (path [:some :path])\n     (path [:some :path] :to :here)\n     (path [:some :path] [:to] :here)\n  "],"~$undoable",["^ ","^5","~$re-frame.middleware/undoable","^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^L",129,"^M",1,"^N",129,"^O",14,"^J",["^ ","^K","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","^L",129,"^M",6,"^N",129,"^O",14],"^T","A Middleware factory which stores an undo checkpoint.\n  \"explanation\" can be either a string or a function. If it is a\n  function then must be:  (db event-vec) -> string.\n  \"explanation\" can be nil. in which case \"\" is recorded.\n  "],"~$enrich",["^ ","^5","~$re-frame.middleware/enrich","^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^L",151,"^M",1,"^N",151,"^O",12,"^J",["^ ","^K","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","^L",151,"^M",6,"^N",151,"^O",12],"^T","Middleware factory which runs a given function \"f\" in the after position.\n  \"f\" is (db v) -> db\n  Unlike \"after\" which is about side effects, \"enrich\" expects f to process and alter\n  db in some useful way, contributing to the derived data, flowing vibe.\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them in a warning\n  down the bottom.\n  Almost any action (edit text, add new todo, remove a todo) requires a\n  complete reassesment of duplication errors and warnings. Eg: that edit\n  update might have introduced a new duplicate or removed one. Same with a\n  todo removal.\n  And to perform this enrichment, a function has to inspect all the todos,\n  possibly set flags on each, and set some overall list of duplicates.\n  And this duplication check might just be one check among many.\n  \"f\" would need to be both adding and removing the duplicate warnings.\n  By applying \"f\" in middleware, we keep the handlers simple and yet we\n  ensure this important step is not missed."],"~$after",["^ ","^5","~$re-frame.middleware/after","^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^L",179,"^M",1,"^N",179,"^O",11,"^J",["^ ","^K","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","^L",179,"^M",6,"^N",179,"^O",11],"^T","Middleware factory which runs a function \"f\" in the \"after handler\"\n  position presumably for side effects.\n  \"f\" is given the new value of \"db\". It's return value is ignored.\n  Examples: \"f\" can run schema validation. Or write current state to localstorage. etc.\n  In effect, \"f\" is meant to sideeffect. It gets no chance to change db. See \"enrich\"\n  (if you need that.)"],"~$on-changes",["^ ","^5","~$re-frame.middleware/on-changes","^K","resources/public/js/compiled/out/re_frame/middleware.cljs","^L",198,"^M",1,"^N",198,"^O",17,"^J",["^ ","^K","/home/timothy/git/power-turtle/resources/public/js/compiled/out/re_frame/middleware.cljs","^L",198,"^M",7,"^N",198,"^O",17],"^T","Middleware factory which acts a bit like \"reaction\"  (but it flows into db , rather than out)\n  It observes N  inputs (paths into db) and if any of them change (as a result of the\n  handler being run) then it runs 'f' to compute a new value, which is\n  then assoced into the given out-path within app-db.\n\n  Usage:\n\n  (defn my-f\n    [a-val b-val]\n    ... some computation on a and b in here)\n\n  (on-changes my-f [:c]  [:a] [:b])\n\n  Put the middlware above on the right handlers (ones which might change :a or :b).\n  It will:\n     - call 'f' each time the value at path [:a] or [:b] changes\n     - call 'f' with the values extracted from [:a] [:b]\n     - assoc the return value from 'f' into the path  [:c]\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^9","^9"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:re-frame-factory-name","~:else"]],"~:order",["^1B","^1C"]],"^T",null]