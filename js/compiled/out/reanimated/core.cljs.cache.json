["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Date",["^ "],"~$Error",["^ "],"~$setInterval",["^ "],"~$clearInterval",["^ "],"~$setTimeout",["^ "],"~$clearTimeout",["^ "],"~$window",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$reanimated.core","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","^B","^B","~$events","~$goog.events","^D","^D","~$EventType","~$goog.events.EventType","^F","^F","~$dom","~$goog.dom","^H","^H"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$interval",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","~:line",239,"~:column",7,"~:end-line",239,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^U",[["~$f","~$t"]]]]],"~:doc","Call function f every period t while mounted in the DOM."],"^=","~$reanimated.core/interval","~:variadic",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",15,"~:method-params",["^U",[["~$f","~$t"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^Q",1,"^P",239,"^R",239,"~:max-fixed-arity",2,"~:fn-var",true,"^T",["^U",["^V",["^U",[["~$f","~$t"]]]]],"^W","Call function f every period t while mounted in the DOM."],"~$timeline",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",302,"^Q",7,"^R",302,"^S",15,"^T",["^U",["^V",["^U",[["~$x","~$&","~$xs"]]]]],"^W","Given a sequence of inputs, will consume them depending on their type:\n  numbers will be a sleep in milliseconds\n  functions will be called with no arguments\n  vectors will be rendered as reagent components.","~:top-fn",["^ ","^Y",true,"^11",1,"^Z",[["^U",["~$x","^14"]]],"^T",["^U",[["~$x","~$&","^14"]]],"^10",["^U",[null]]]],"^=","~$reanimated.core/timeline","^Y",true,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",15,"^15",["^ ","^Y",true,"^11",1,"^Z",[["^U",["~$x","^14"]]],"^T",["^U",[["~$x","~$&","^14"]]],"^10",["^U",[null]]],"^Z",[["^U",["~$x","^14"]]],"^[",null,"^10",["^U",[null]],"^Q",1,"^P",302,"^R",302,"^11",1,"^12",true,"^T",["^U",[["~$x","~$&","^14"]]],"^W","Given a sequence of inputs, will consume them depending on their type:\n  numbers will be a sleep in milliseconds\n  functions will be called with no arguments\n  vectors will be rendered as reagent components."],"~$timeout",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",254,"^Q",7,"^R",254,"^S",14,"^T",["^U",["^V",["^U",[["~$f","~$t"]]]]],"^W","Call function f period t in milliseconds after being mounted in the DOM,\n  only if still mounted."],"^=","~$reanimated.core/timeout","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",14,"^Z",["^U",[["~$f","~$t"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",254,"^R",254,"^11",2,"^12",true,"^T",["^U",["^V",["^U",[["~$f","~$t"]]]]],"^W","Call function f period t in milliseconds after being mounted in the DOM,\n  only if still mounted."],"~$and-then",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",270,"^Q",17,"^R",270,"^S",25,"~:private",true,"^T",["^U",["^V",["^U",[["~$id","~$element","~$x","~$&","~$more"]]]]],"^W","Use timeline instead of this function directly.\n  Provides a way to express a sequence of actions and pauses.\n  Takes an id atom, element ratom,\n  and a sequence of numbers and/or callback functions and/or vectors.\n  Treats numbers as a wait timeout in milliseconds,\n  calls callbacks after the elapsed time.\n  id is reset as the timeout reference for cleanup.\n  element is reset to vectors for rendering. ","^15",["^ ","^Y",true,"^11",3,"^Z",[["^U",["^1;","^1<","~$x","^1="]]],"^T",["^U",[["^1;","^1<","~$x","~$&","^1="]]],"^10",["^U",[null]]]],"^1:",true,"^=","~$reanimated.core/and-then","^Y",true,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",25,"^15",["^ ","^Y",true,"^11",3,"^Z",[["^U",["^1;","^1<","~$x","^1="]]],"^T",["^U",[["^1;","^1<","~$x","~$&","^1="]]],"^10",["^U",[null]]],"^Z",[["^U",["^1;","^1<","~$x","^1="]]],"^[",null,"^10",["^U",[null]],"^Q",1,"^P",270,"^R",270,"^11",3,"^12",true,"^T",["^U",[["^1;","^1<","~$x","~$&","^1="]]],"^W","Use timeline instead of this function directly.\n  Provides a way to express a sequence of actions and pauses.\n  Takes an id atom, element ratom,\n  and a sequence of numbers and/or callback functions and/or vectors.\n  Treats numbers as a wait timeout in milliseconds,\n  calls callbacks after the elapsed time.\n  id is reset as the timeout reference for cleanup.\n  element is reset to vectors for rendering. "],"~$stiffness",["^ ","^=","~$reanimated.core/stiffness","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",162,"^Q",1,"^R",162,"^S",25,"^1:",true,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",162,"^Q",16,"^R",162,"^S",25,"^1:",true],"~:tag","~$number"],"~$mass",["^ ","^=","~$reanimated.core/mass","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",161,"^Q",1,"^R",161,"^S",20,"^1:",true,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",161,"^Q",16,"^R",161,"^S",20,"^1:",true],"^1A","^1B"],"~$pop-when",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",27,"^Q",7,"^R",27,"^S",15,"^T",["^U",["^V",["^U",[["~$condition","~$then"],["^1F","^1G","~$options"]]]]],"^W","Wraps a component to animate creation and destruction.\n  Takes a condition ratom and a vector or value to be rendered.\n  Options can contain duration (milliseconds)\n  and easing (a function that takes a b duration t).","^15",["^ ","^Y",false,"^11",3,"^Z",["^U",[["^1F","^1G"],["^1F","^1G","^1H"]]],"^T",["^U",[["^1F","^1G"],["^1F","^1G","^1H"]]],"^10",["^U",[null,null]]]],"^=","~$reanimated.core/pop-when","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",15,"^15",["^ ","^Y",false,"^11",3,"^Z",["^U",[["^1F","^1G"],["^1F","^1G","^1H"]]],"^T",["^U",[["^1F","^1G"],["^1F","^1G","^1H"]]],"^10",["^U",[null,null]]],"^Z",["^U",[["^1F","^1G"],["^1F","^1G","^1H"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",27,"^R",27,"^11",3,"^12",true,"^T",["^U",[["^1F","^1G"],["^1F","^1G","^1H"]]],"^W","Wraps a component to animate creation and destruction.\n  Takes a condition ratom and a vector or value to be rendered.\n  Options can contain duration (milliseconds)\n  and easing (a function that takes a b duration t)."],"~$get-scroll-x",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",332,"^Q",7,"^R",332,"^S",19,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document x scroll position."],"^=","~$reanimated.core/get-scroll-x","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",19,"^Z",["^U",[[]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",332,"^R",332,"^11",0,"^12",true,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document x scroll position."],"~$scroll-x",["^ ","^=","~$reanimated.core/scroll-x","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",347,"^Q",1,"^R",347,"^S",14,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",347,"^Q",6,"^R",347,"^S",14],"^W","A ratom for watching the current document x scroll,\n  will be updated when there is a scroll event.","^1A","~$any"],"~$now",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",16,"^Q",17,"^R",16,"^S",20,"^1:",true,"^T",["^U",["^V",["^U",[[]]]]]],"^1:",true,"^=","~$reanimated.core/now","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",20,"^Z",["^U",[[]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",16,"^R",16,"^11",0,"^12",true,"^T",["^U",["^V",["^U",[[]]]]]],"~$evaluate",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",165,"^Q",17,"^R",165,"^S",25,"^1:",true,"^T",["^U",["^V",["^U",[["~$x2","~$dt","~$x","~$v","~$a",["^ ","~:keys",["^1C","^1?","~$damping"]]]]]]],"^W","This is where the spring physics formula is applied."],"^1:",true,"^=","~$reanimated.core/evaluate","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",25,"^Z",["^U",[["^1R","^1S","~$x","~$v","~$a","~$p__32575"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",165,"^R",165,"^11",6,"^12",true,"^T",["^U",["^V",["^U",[["^1R","^1S","~$x","~$v","~$a",["^ ","^1T",["^1C","^1?","^1U"]]]]]]],"^W","This is where the spring physics formula is applied."],"~$get-scroll-y",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",323,"^Q",7,"^R",323,"^S",19,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document y scroll position."],"^=","~$reanimated.core/get-scroll-y","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",19,"^Z",["^U",[[]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",323,"^R",323,"^11",0,"^12",true,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document y scroll position."],"~$scroll-y",["^ ","^=","~$reanimated.core/scroll-y","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",337,"^Q",1,"^R",337,"^S",14,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",337,"^Q",6,"^R",337,"^S",14],"^W","A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event.","^1A","^1N"],"~$toggle-handler",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",55,"^Q",7,"^R",55,"^S",21,"^T",["^U",["^V",["^U",[["~$ratom"]]]]],"^W","Creates an event handler that will toggle a given ratom."],"^=","~$reanimated.core/toggle-handler","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",21,"^Z",["^U",[["^21"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",55,"^R",55,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["^21"]]]]],"^W","Creates an event handler that will toggle a given ratom."],"~$mouse-watcher",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",62,"^Q",7,"^R",62,"^S",20,"^T",["^U",["^V",["^U",[["^21"]]]]],"^W","Returns a map suitable for merging with component properties,\n  that will keep a given ratom updated with the mouseover status."],"^=","~$reanimated.core/mouse-watcher","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",20,"^Z",["^U",[["^21"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",62,"^R",62,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["^21"]]]]],"^W","Returns a map suitable for merging with component properties,\n  that will keep a given ratom updated with the mouseover status."],"~$interpolate-to",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",102,"^Q",7,"^R",102,"^S",21,"^T",["^U",["^V",["^U",[["~$x"],["~$x","^1H"]]]]],"^W","Interpolates toward new values.\n  Takes a ratom which stores a numeric value.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).","^15",["^ ","^Y",false,"^11",2,"^Z",["^U",[["~$x"],["~$x","^1H"]]],"^T",["^U",[["~$x"],["~$x","^1H"]]],"^10",["^U",[null,null]]]],"^=","~$reanimated.core/interpolate-to","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",21,"^15",["^ ","^Y",false,"^11",2,"^Z",["^U",[["~$x"],["~$x","^1H"]]],"^T",["^U",[["~$x"],["~$x","^1H"]]],"^10",["^U",[null,null]]],"^Z",["^U",[["~$x"],["~$x","^1H"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",102,"^R",102,"^11",2,"^12",true,"^T",["^U",[["~$x"],["~$x","^1H"]]],"^W","Interpolates toward new values.\n  Takes a ratom which stores a numeric value.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."],"~$interpolate",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",19,"^Q",17,"^R",19,"^S",28,"^1:",true,"^T",["^U",["^V",["^U",[["~$a","~$b","~$duration","~$t"]]]]],"^W","Calculates a value between a and b relative to t in duration."],"^1:",true,"^=","~$reanimated.core/interpolate","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",28,"^Z",["^U",[["~$a","~$b","^28","~$t"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",19,"^R",19,"^11",4,"^12",true,"^T",["^U",["^V",["^U",[["~$a","~$b","^28","~$t"]]]]],"^W","Calculates a value between a and b relative to t in duration."],"~$integrate-rk4",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",174,"^Q",17,"^R",174,"^S",30,"^1:",true,"^T",["^U",["^V",["^U",[["^1R","^1S","~$x","~$v","^1H"]]]]],"^W","Takes an itegration step from numbers x to x2 over time dt,\n  with a present velocity v."],"^1:",true,"^=","~$reanimated.core/integrate-rk4","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",30,"^Z",["^U",[["^1R","^1S","~$x","~$v","^1H"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",174,"^R",174,"^11",5,"^12",true,"^T",["^U",["^V",["^U",[["^1R","^1S","~$x","~$v","^1H"]]]]],"^W","Takes an itegration step from numbers x to x2 over time dt,\n  with a present velocity v."],"~$small",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",187,"^Q",17,"^R",187,"^S",22,"^1:",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"^1:",true,"^=","~$reanimated.core/small","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",22,"^Z",["^U",[["~$x"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",187,"^R",187,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$interpolate-if",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",76,"^Q",7,"^R",76,"^S",21,"^T",["^U",["^V",["^U",[["^1F","~$a","~$b"],["^1F","~$a","~$b","^1H"]]]]],"^W","Interpolates between two values when the conditon changes.\n  Takes a condition ratom to watch, and 2 vectors or values to render.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).","^15",["^ ","^Y",false,"^11",4,"^Z",["^U",[["^1F","~$a","~$b"],["^1F","~$a","~$b","^1H"]]],"^T",["^U",[["^1F","~$a","~$b"],["^1F","~$a","~$b","^1H"]]],"^10",["^U",[null,null]]]],"^=","~$reanimated.core/interpolate-if","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",21,"^15",["^ ","^Y",false,"^11",4,"^Z",["^U",[["^1F","~$a","~$b"],["^1F","~$a","~$b","^1H"]]],"^T",["^U",[["^1F","~$a","~$b"],["^1F","~$a","~$b","^1H"]]],"^10",["^U",[null,null]]],"^Z",["^U",[["^1F","~$a","~$b"],["^1F","~$a","~$b","^1H"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",76,"^R",76,"^11",4,"^12",true,"^T",["^U",[["^1F","~$a","~$b"],["^1F","~$a","~$b","^1H"]]],"^W","Interpolates between two values when the conditon changes.\n  Takes a condition ratom to watch, and 2 vectors or values to render.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."],"~$spring",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",190,"^Q",7,"^R",190,"^S",13,"^T",["^U",["^V",["^U",[["^1R"],["^1R","^1H"]]]]],"^W","Useful for wrapping a value in your component to make it springy.\n  Returns a reaction that will take values approaching x2,\n  updating every time Reagent calls requestAnimationFrame.\n  Integrates a physical spring simulation for each step.\n  Options can contain:\n  from - a value to start from (initial value is used if absent).\n  velocity of the mass on the spring (initially 0 if absent).\n  mass, stiffness, damping of the spring.","^15",["^ ","^Y",false,"^11",2,"^Z",["^U",[["^1R"],["^1R","^1H"]]],"^T",["^U",[["^1R"],["^1R","^1H"]]],"^10",["^U",[null,null]]]],"^=","~$reanimated.core/spring","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",13,"^15",["^ ","^Y",false,"^11",2,"^Z",["^U",[["^1R"],["^1R","^1H"]]],"^T",["^U",[["^1R"],["^1R","^1H"]]],"^10",["^U",[null,null]]],"^Z",["^U",[["^1R"],["^1R","^1H"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",190,"^R",190,"^11",2,"^12",true,"^T",["^U",[["^1R"],["^1R","^1H"]]],"^W","Useful for wrapping a value in your component to make it springy.\n  Returns a reaction that will take values approaching x2,\n  updating every time Reagent calls requestAnimationFrame.\n  Integrates a physical spring simulation for each step.\n  Options can contain:\n  from - a value to start from (initial value is used if absent).\n  velocity of the mass on the spring (initially 0 if absent).\n  mass, stiffness, damping of the spring."],"^1U",["^ ","^=","~$reanimated.core/damping","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",163,"^Q",1,"^R",163,"^S",23,"^1:",true,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",163,"^Q",16,"^R",163,"^S",23,"^1:",true],"^1A","^1B"],"~$interpolate-arg",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",135,"^Q",7,"^R",135,"^S",22,"^T",["^U",["^V",["^U",[["~$component","~$x"],["^2D","~$x","^1H"]]]]],"^W","Interpolates the argument of a component to x.\n  Will call the given component with values approaching x.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).","^15",["^ ","^Y",false,"^11",3,"^Z",["^U",[["^2D","~$x"],["^2D","~$x","^1H"]]],"^T",["^U",[["^2D","~$x"],["^2D","~$x","^1H"]]],"^10",["^U",[null,null]]]],"^=","~$reanimated.core/interpolate-arg","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",22,"^15",["^ ","^Y",false,"^11",3,"^Z",["^U",[["^2D","~$x"],["^2D","~$x","^1H"]]],"^T",["^U",[["^2D","~$x"],["^2D","~$x","^1H"]]],"^10",["^U",[null,null]]],"^Z",["^U",[["^2D","~$x"],["^2D","~$x","^1H"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",135,"^R",135,"^11",3,"^12",true,"^T",["^U",[["^2D","~$x"],["^2D","~$x","^1H"]]],"^W","Interpolates the argument of a component to x.\n  Will call the given component with values approaching x.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."],"~$scroll",["^ ","^=","~$reanimated.core/scroll","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",342,"^Q",1,"^R",342,"^S",12,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",342,"^Q",6,"^R",342,"^S",12],"^W","A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event.","^1A","^1N"],"~$get-scroll",["^ ","^=","~$reanimated.core/get-scroll","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",328,"^Q",1,"^R",328,"^S",16,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",328,"^Q",6,"^R",328,"^S",16],"^W","Gets the current document y scroll position."],"~$watch",["^ ","^M",null,"^N",["^ ","^O","/home/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",224,"^Q",7,"^R",224,"^S",12,"^T",["^U",["^V",["^U",[["~$r","~$f"]]]]],"^W","Watch a ref only while mounted in the DOM."],"^=","~$reanimated.core/watch","^Y",false,"^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",12,"^Z",["^U",[["~$r","~$f"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",224,"^R",224,"^11",2,"^12",true,"^T",["^U",["^V",["^U",[["~$r","~$f"]]]]],"^W","Watch a ref only while mounted in the DOM."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^21","~$reagent.ratom","^2N","^2N","^A","^B","^B","^B"],"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["~:mass","~:v","~:transform","~:frame","~:else","~:on-mouse-out","~:component-did-mount","~:start","~:easing","~:duration","~:style","~:div","~:damping","~:reagent-render","~:from","~:opacity","~:condition","~:current","~:at","~:component-will-unmount","~:display-name","~:on-mouse-over","~:t","~:x","~:p","~:velocity","~:stiffness","~:to"]],"~:order",["^2T","^32","^2W","^2S","^2Y","^2X","^2[","^2Z","^2R","^33","^39","^2U","^34","^36","^3<","^35","^2Q","^3;","^30","^3:","~:t","~:x","~:v","^38","^2V","^37","^31","~:p"]],"^W","An animation library for Reagent (ClojureScript).\n  There is only one concept:\n  A reaction that moves toward some target,\n  each step triggers another update until it reaches the end state.\n  The trigger occurs by touching a local atom a zero timeout,\n  which changes the atom in the next Reagent render."]